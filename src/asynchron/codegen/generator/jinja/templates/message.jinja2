{# @formatter:off #}
{% extends "base/python_module.jinja2" %}

{% macro render_python_type_name(type) -%}
    {%- if type.module -%}
        {%- if type.module.path and type.module.path != ("builtins",) -%}
            {%- if type.module.alias -%}
                {{ type.module.alias }}
            {%- else -%}
                {{ type.module.path|join(".") }}
            {%- endif -%}
            .
        {%- endif -%}
        {{ type.path|join(".") }}
    {%- else -%}
        {{ type.path|pascalcase }}
    {%- endif -%}
{%- endmacro %}

{% macro render_python_type(type) -%}
    {%- if not is_inline_enum_def(type) -%}
    {{ render_python_type_name(type) }}
    {%- if type.type_parameters -%}
        [
        {%- for type_parameter in type.type_parameters -%}
            {{ render_python_type(type_parameter) }}
            {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        ]
    {%- endif -%}
    {%- else -%}
    {{ render_python_type_name(type.bases[0]) }}[{{ type.literals|map(attribute="value")|join(", ") }}]
    {%- endif -%}
{%- endmacro %}

{% macro render_field_info(field_info_class, info) -%}
    {%- if info.default
                or info.alias
                or info.title
                or info.description
                or info.const
                or info.gt
                or info.ge
                or info.lt
                or info.le
                or info.multiple_of
                or info.min_items
                or info.max_items
                or info.min_length
                or info.max_length
                or info.allow_mutation
                or info.regex -%}
    pydantic.Field(
        {% if info.default %}
        default={{ info.default|python_expr }},
        {% endif %}
        {% if info.alias %}
        alias="{{ info.alias }}",
        {% endif %}
{#        {% if field.title %}#}
{#        title="""{{ field.title }}""",#}
{#        {% endif %}#}
        {% if info.description %}
        description="""{{ info.description }}""",
        {% endif %}
{#        {% if field.const %}#}
{#        const={{ field.const }},#}
{#        {% endif %}#}
        {% if info.gt %}
        gt={{ info.gt }},
        {% endif %}
        {% if info.ge %}
        ge={{ info.ge }},
        {% endif %}
        {% if info.lt %}
        lt={{ info.lt }},
        {% endif %}
        {% if info.le %}
        le={{ info.le }},
        {% endif %}
        {% if info.multiple_of %}
        multiple_of={{ info.multiple_of }},
        {% endif %}
        {% if info.min_items %}
        min_items={{ info.min_items }},
        {% endif %}
        {% if info.max_items %}
        max_items={{ info.max_items }},
        {% endif %}
        {% if info.min_length %}
        min_length={{ info.min_length }},
        {% endif %}
        {% if info.max_length %}
        max_length={{ info.max_length }},
        {% endif %}
        {% if info.allow_mutation %}
        allow_mutation={{ info.allow_mutation|python_expr }},
        {% endif %}
        {% if info.regex %}
        regex=r"""{{ info.regex }}""",
        {% endif %}
    )
    {%- else -%}
    pydantic.Field()
    {%- endif %}
{%- endmacro %}


{% macro render_python_class_bases(bases) -%}
    {% if bases -%}
        (
        {%- for base in bases -%}
            {{ render_python_type(base) }}
            {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        )
    {%- endif %}
{%- endmacro %}

{% block classes %}
    {% for class in classes %}
class {{ class.path|pascalcase }}{{ render_python_class_bases(class.bases) }}:
        {% if class.descrition %}
    """{{ class.description }}"""
        {% endif %}
        {% if class.fields %}
            {% for field in class.fields|sorted(attribute="name") %}
    {{ field.name|snakecase }}: {{ render_python_type(field.of_type) }} = {{ render_field_info(field_info_class, field.info) }}
            {% endfor %}
{#        {% elif class.literals %}#}
{#            {% for literal in class.literals %}#}
{#    {{ literal.name|constcase }} = {{ literal.expr.value }}#}
{#            {% endfor %}#}
        {% else %}
    pass
        {% endif %}


    {% endfor %}
{% endblock %}
{# @formatter:on #}
